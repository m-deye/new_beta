# Generated by Django 5.1.5 on 2025-09-19 18:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UtilisateurPersonnalise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Adresse électronique')),
                ('valide', models.BooleanField(default=False, verbose_name='Compte validé')),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='utilisateurs', to='auth.group', verbose_name='Rôle')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'permissions': [('valider_utilisateurpersonnalise', 'Peut valider un utilisateur'), ('consulter_dashboard', 'Peut consulter tableau de bord')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Candidat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.FileField(null=True, upload_to='logos/')),
                ('cv', models.FileField(blank=True, null=True, upload_to='cvs/')),
                ('lettre_motivation', models.FileField(blank=True, null=True, upload_to='lettre_motivation/')),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('prenom_ar', models.CharField(blank=True, max_length=100, null=True)),
                ('nom_ar', models.CharField(blank=True, max_length=100, null=True)),
                ('prenom', models.CharField(blank=True, max_length=100, null=True)),
                ('nom', models.CharField(blank=True, max_length=100, null=True)),
                ('telephone', models.CharField(blank=True, max_length=30, null=True)),
                ('pays', models.CharField(blank=True, choices=[('Mauritanie', 'Mauritanie'), ('France', 'France'), ('Autre', 'Autre')], max_length=50, null=True)),
                ('adresse', models.TextField(blank=True, null=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('lieu_naissance', models.CharField(blank=True, choices=[('Trarza', 'Trarza'), ('Nouakchott', 'Nouakchott'), ('Autre', 'Autre')], max_length=50, null=True)),
                ('genre', models.CharField(blank=True, choices=[('Homme', 'Homme'), ('Femme', 'Femme')], max_length=10, null=True)),
                ('cv_validated', models.BooleanField(default=False, verbose_name='Validation CV')),
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='candidat', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('special', models.BooleanField(default=False, verbose_name='Compte special')),
                ('logo', models.FileField(blank=True, null=True, upload_to='logos/')),
                ('libelle_fr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Libellé (français)')),
                ('libelle_ar', models.CharField(blank=True, max_length=255, null=True, verbose_name='Libellé (arabe)')),
                ('nom', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nom')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('tel', models.CharField(max_length=20, null=True, verbose_name='Téléphone')),
                ('domaine', models.CharField(max_length=100, null=True, verbose_name='Domaine')),
                ('type_organisation', models.CharField(blank=True, max_length=100, null=True, verbose_name="Type d'Organisation")),
                ('adresse', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse')),
                ('site_web', models.URLField(blank=True, null=True, verbose_name='Site Web')),
                ('lieu', models.CharField(blank=True, max_length=255, null=True, verbose_name='Lieu')),
                ('fax', models.CharField(blank=True, max_length=20, null=True, verbose_name='Fax')),
                ('nom_responsable', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nom du Responsable')),
                ('fonction_responsable', models.CharField(blank=True, max_length=200, null=True, verbose_name='Fonction du Responsable')),
                ('email_responsable', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email du Responsable')),
                ('tel_responsable', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone du Responsable')),
                ('nom_ref1', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nom référence 1')),
                ('email_ref1', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email référence 1')),
                ('nom_ref2', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nom référence 2')),
                ('email_ref2', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email référence 2')),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('utilisateur', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

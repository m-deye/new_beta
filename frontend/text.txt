import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "../assets/styles/Login.css";

import NavbarComponent from "./NavbarComponent";
import FooterComponent from "./FooterComponent";
import axiosInstance from "../api/axiosInstance";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const [remember, setRemember] = useState(false);


  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const response = await fetch("http://127.0.0.1:8000/api/login/", {
  //     method: "POST",
  //     headers: {
  //       "Content-Type": "application/json",
  //     },
  //     body: JSON.stringify({ email, password }),
  //   });

  //   const data = await response.json();
    
  //   if (response.ok) {
  //     console.log("Réponse de l'API login:", data);
  //     localStorage.setItem("user_token", data.token); 
  //     localStorage.setItem("user_role", data.role); 
  //     localStorage.setItem("user_id", data.user_id); 

  //     let profileUrl = "";
  //     let dashboardRoute = "";

  //     if (data.role === "client") {
  //       localStorage.setItem("client_id", data.role_id);
  //       profileUrl = `http://127.0.0.1:8000/api/client/${data.role_id}/profile/`;
  //       dashboardRoute = "/client-dashboard/";
  //     } else if (data.role === "candidat") {
  //       localStorage.setItem("candidat_id", data.role_id);
  //       profileUrl = `http://127.0.0.1:8000/api/candidat/${data.role_id}/profile/`;
  //       dashboardRoute = "/candidat-dashboard";
  //     } else {
  //       setError("Rôle non reconnu.");
  //       return;
  //     }

  //     // Récupérer le profil spécifique du client ou du candidat
  //     const profileResponse = await fetch(profileUrl, {
  //       headers: {
  //         Authorization: `Token ${data.token}`, // Utilisation du token pour sécuriser l'API
  //         "Content-Type": "application/json",
  //       },
  //     });

  //     const profileData = await profileResponse.json();

  //     if (profileResponse.ok) {
  //       console.log("Profil récupéré:", profileData);
  //       navigate(dashboardRoute, { state: { profileData } }); // Rediriger vers le bon dashboard
  //     } else {
  //       setError("Erreur lors de la récupération du profil.");
  //     }
  //   } else {
  //     setError(data.error || "Une erreur s'est produite lors de la connexion.");
  //   }
  // };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     const response = await fetch("http://127.0.0.1:8000/api/login/", {
//         method: "POST",
//         headers: {
//             "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ email, password }),
//     });

//     const data = await response.json();

//     if (response.ok) {
//         console.log("Réponse de l'API login:", data);
//         localStorage.setItem("user_token", data.token);
//         localStorage.setItem("user_role", data.role);
//         localStorage.setItem("user_id", data.user_id);

//         let profileUrl = "";
//         let dashboardRoute = "";

//         if (data.role === "client") {
//             localStorage.setItem("client_id", data.role_id);
//             profileUrl = `http://127.0.0.1:8000/api/client/${data.role_id}/profile/`;
//         } else if (data.role === "candidat") {
//             localStorage.setItem("candidat_id", data.role_id);
//             profileUrl = `http://127.0.0.1:8000/api/candidat/${data.role_id}/profile/`;
//             // dashboardRoute = "/candidat-dashboard";
//         } else {
//             setError("Rôle non reconnu.");
//             return;
//         }

//         // Récupérer le profil du client ou du candidat
//         const profileResponse = await fetch(profileUrl, {
//             headers: {
//                 Authorization: `Token ${data.token}`,
//                 "Content-Type": "application/json",
//             },
//         });

//         const profileData = await profileResponse.json();

//         if (profileResponse.ok) {
//             console.log("Profil récupéré:", profileData);

//             if (data.role === "client") {
//                 dashboardRoute = `/client-dashboard/${profileData.username}`; // Ajout du libellé
//             }
//             if (data.role === "candidat") {
//               dashboardRoute = `/candidat-dashboard/${profileData.username}`; // Ajout du libellé
//           }

//             navigate(dashboardRoute, { state: { profileData } });
//         } else {
//             setError("Erreur lors de la récupération du profil.");
//         }
//     } else {
//         setError(data.error || "Votre compte client n'a pas encore été validé.");
//     }
// };



const handleSubmit = async (e) => {
  e.preventDefault();

  try {
    // Appel API de login
    const loginRes = await axiosInstance.post("/api/login/", { email, password });
    const data = loginRes.data;

    console.log("Réponse de l'API login:", data);

    localStorage.setItem("user_token", data.token);
    localStorage.setItem("user_role", data.role);
    localStorage.setItem("user_id", data.user_id);

    let profileUrl = "";
    let dashboardRoute = "";

    if (data.role === "client") {
      localStorage.setItem("client_id", data.role_id);
      profileUrl = `/api/client/${data.role_id}/profile/`;
    } else if (data.role === "candidat") {
      localStorage.setItem("candidat_id", data.role_id);
      profileUrl = `/api/candidat/${data.role_id}/profile/`;
    } else {
      setError("Rôle non reconnu.");
      return;
    }

    // Récupération du profil avec token
    const profileRes = await axiosInstance.get(profileUrl, {
      headers: {
        Authorization: `Token ${data.token}`,
      },
    });

    const profileData = profileRes.data;
    console.log("Profil récupéré:", profileData);

    if (data.role === "client") {
      dashboardRoute = `/client-dashboard/${profileData.username}`;
    } else if (data.role === "candidat") {
      dashboardRoute = `/candidat-dashboard/${profileData.username}`;
    }

    navigate(dashboardRoute, { state: { profileData } });

  } catch (error) {
    console.error("Erreur lors du login:", error);
    if (error.response?.data?.error) {
      setError(error.response.data.error);
    } else {
      setError("Une erreur est survenue. Veuillez réessayer.");
    }
  }
};


  return (
    <div>
      <NavbarComponent />
     
      <div className="py-1" id="appMain" style={{ background: '#E7EFF7'}}>
        <div className="container" >
          <div className="row justify-content-center">
            <div className="col-md-6">
              <div className="row">
                {/* <div className="col-lg-12 text-center mt-3 mb-3">
                  <img
                    style={{ width: "100px", height: "100px" }}
                    src="https://www.beta.mr/img/logo_beta.jpg"
                    alt="Beta Logo"
                  />
                </div> */}
                <div className="col-lg-12">
                  <div className="carde shadow-lg">
                    <div className=" p-0">
                      <div className="px-5 pt-5 pb-3">
                        <div className="text-center">
                          <h1 className="h4 text-gray-900 mb-4">CONNEXION</h1>
                          {error && <p className="text-danger">{error}</p>}
                        </div>
                        <form onSubmit={handleSubmit}>
                          <div className="form-group">
                            <label htmlFor="email" className="control-label d-none">
                              Utilisateur
                            </label>
                            <input
                              placeholder="Utilisateur"
                              id="email"
                              type="text"
                              className="form-control"
                              value={email}
                              onChange={(e) => setEmail(e.target.value)}
                              required
                              autoFocus
                            />
                          </div>
                          <div className="form-group">
                            <label htmlFor="password" className="control-label d-none">
                              Mot de passe
                            </label>
                            <input
                              placeholder="Mot de passe"
                              id="password"
                              type="password"
                              className="form-control"
                              value={password}
                              onChange={(e) => setPassword(e.target.value)}
                              required
                            />
                          </div>
                          <div className="form-group">
                            <div className="checkbox">
                            <label>
                            <input 
                              type="checkbox" 
                              name="remember" 
                              checked={remember}
                              onChange={(e) => setRemember(e.target.checked)} 
                            /> Restez connecté
                          </label>
                            </div>
                          </div>
                          <div className="form-group">
                            <button type="submit" className="btn btn-info btn-block">
                              Connexion
                            </button>
                          </div>
                        </form>
                        <div className="text-center mt-4">
                          <a className="text-body" href="PasswordResetRequest">
                            Mot de passe oublié? 
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="text-center mt-3">
                    Nouvel utilisateur? <a href="/inscription">Créer un compte!</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <FooterComponent />
    </div>
  );
};

export default Login;




import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import './contact.css';
import { useTranslation } from 'react-i18next';

import Header from './Header';
import Navbar from './Navbar';
import Footer from './Footer';

import axiosInstance from "./api/axiosInstance";

const Contact = () => {
  const [captchaSrc, setCaptchaSrc] = useState('https://beta.mr/captcha/default?MBn1vwFT');

  // Rafraîchir le captcha
  const handleRefreshCaptcha = () => {
    setCaptchaSrc(`https://beta.mr/captcha/default?${Math.random()}`);
  };
  const [formData, setFormData] = useState({
    nom: '',
    email: '',
    sujet: '',
    description: '',
    captcha: ''
  });
  
  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  
  // const handleSubmit = async (e) => {
  //   e.preventDefault();
  
  //   try {
  //     const response = await fetch("http://127.0.0.1:8000/api/sendMessage/", {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/json"
  //       },
  //       body: JSON.stringify(formData)
  //     });
  
  //     const data = await response.json();
  
  //     if (response.ok) {
  //       alert("Message envoyé avec succès !");
  //     } else {
  //       alert("Erreur lors de l'envoi : " + JSON.stringify(data));
  //     }
  //   } catch (error) {
  //     console.error("Erreur réseau :", error);
  //     alert("Erreur réseau !");
  //   }
  // };
  

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    try {
      const response = await axiosInstance.post("/api/sendMessage/", formData);
  
      if (response.status === 200 || response.status === 201) {
        alert("Message envoyé avec succès !");
      } else {
        alert("Erreur lors de l'envoi : " + JSON.stringify(response.data));
      }
    } catch (error) {
      console.error("Erreur réseau :", error);
      if (error.response?.data) {
        alert("Erreur : " + JSON.stringify(error.response.data));
      } else {
        alert("Erreur réseau !");
      }
    }
  };
  



  return (
    <div className="contact-page">
      <Header />
      <Navbar />

      <main className="container py-5" style={{ background: '#fff' }}>
        <div className="row g-4" id="divContact">
          {/* Formulaire de contact */}
          <div className="col-md-8">
            <h5 className="mb-4">Envoyez-nous un message</h5>
            <form onSubmit={handleSubmit}>
              <div className="row">
                <div className="col-md-6 mb-3"  style={{ paddingRight: '20px' }}>
                  <label htmlFor="nom" className="form-label ms-3">
                    Nom <span className="" title="Champ obligatoire">*</span>
                  </label>
                  <input
                    id="nom"
                    name="nom"
                    type="text"
                    className="form-control ms-3"
                    required
                    value={formData.nom}
                    onChange={handleChange} 
                  />
                </div>

                <div className="col-md-6  mb-3"  style={{ paddingRight: '10px' }}>
                  <label htmlFor="email" className="form-label ">
                    Email <span className="" title="Champ obligatoire">*</span>
                  </label>
                  <input
                    id="email"
                    name="email"
                    type="email"
                    className="form-control"
                    required
                    value={formData.email}
                    onChange={handleChange}
                  />
                </div>

                <div className="col-12  mb-3">
                  <label htmlFor="sujet" className="form-label ">
                    Sujet <span className="" title="Champ obligatoire">*</span>
                  </label>
                  <input
                    id="sujet"
                    name="sujet"
                    type="text"
                    className="form-control"
                    required
                    value={formData.sujet}
                    onChange={handleChange}
                  />
                </div>

                <div className="col-12  mb-3">
                  <label htmlFor="description" className="form-label ">
                    Message <span className="" title="Champ obligatoire">*</span>
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    className="form-control"
                    rows="5"
                    required
                    value={formData.description}
                    onChange={handleChange}
                  />
                </div>

                <div className="col-md-6 ms-3">
                  <div className="captcha d-flex align-items-center mb-3">
                    <img src={captchaSrc} alt="Captcha" className="captcha-img" />
                    <button
                      type="button"
                      className="btn btn-danger ms-2"
                      id="refresh-captcha"
                      onClick={handleRefreshCaptcha}
                    >
                      ↻
                    </button>
                  </div>
                  <input
                    id="captcha"
                    name="captcha"
                    type="text"
                    className="form-control"
                    placeholder="Saisir le captcha"
                    required
                    value={formData.captcha}
                    onChange={handleChange}
                  />
                </div>
              </div>

              <button type="submit" className="btn btn-success mt-3">Envoyer</button>
            </form>

            {/* Lien pour nouveau client */}
            <a
              className="btn btn-info mt-3 float-end"
              href="/CreeClient"
              style={{ textDecoration: 'none' }}
            >
              Nouveau client
            </a>
          </div>




          {/* Informations de contact */}
          <div className="col-md-4 contact-info p-4 border rounded">
            <p>
              <i className="fas fa-map-marker-alt me-2"></i>
              Beta-conseils Ilot T, lot 48<br />
              Avenue El hadj Oumar Tall (ex Avenue De Gaulle)
            </p>
            <p>
              <i className="fa fa-phone-square me-2" aria-hidden="true"></i>
              (222) 45 25 79 15 - (222) 47 08 04 74
            </p>
            <p>
              <i className="far fa-envelope me-2"></i>
              beta@beta.mr
            </p>
            <h6>Informations clients</h6>
            <p>
              Yéro Amadou Sall<br />
              <i className="far fa-envelope me-2"></i> infos@beta.mr<br />
              (222) 34.01.19.88
            </p>
            <h6>Commercial</h6>
            <p>
              Ely Cheikh Ould Boukhary<br />
              <i className="far fa-envelope me-2"></i> commercial@beta.mr
            </p>
            <h6>Coordination</h6>
            <p>
              Massamba Kane<br />
              <i className="far fa-envelope me-2"></i> massamba@beta.mr
            </p>
            <h6>Directeur Général</h6>
            <p>
              Sidi Mohamed Ould Bouh<br />
              <i className="far fa-envelope me-2"></i> ouldbouh@beta.mr
            </p>
          </div>
        </div>

        {/* Carte Google Maps */}
        <div className="map-container my-5 border rounded overflow-hidden">
          <iframe
            src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d15170.553533878443!2d-15.9778611!3d18.0882878!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0xb518e06f640d2344!2sBeta%20Conseils!5e0!3m2!1sen!2s!4v1572106466960!5m2!1sen!2s"
            width="100%"
            height="300"
            frameBorder="0"
            style={{ border: 0 }}
            allowFullScreen
            title="Beta Conseils Location"
          />
        </div>
      </main>

      <Footer />
    </div>
  );
};

export default Contact;
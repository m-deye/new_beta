version1 import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import './ClientDashboard.css';
import ProfileClient from "./ProfileClient";
import OffresEmploi from "./OffresEmploi";
import AppleOffres from "./AppleOffres";
import Statistics from "./Statistics";
import AvisInfos from "./AvisInfos"; // Importer le nouveau composant




const ClientDashboard = () => {
  const location = useLocation();
  const initialProfile = location.state?.profileData || {};
  const [profile, setProfile] = useState(initialProfile);
  const [messages, setMessages] = useState({});
  const [activeSection, setActiveSection] = useState("statistiques");
  const [showProfileButtons, setShowProfileButtons] = useState(false);

  const [statistics, setStatistics] = useState({
    nombreOffresEmploi: 12,
    nombreAppleOffres: 5,
  });

  const [offresEmploi, setOffresEmploi] = useState([]);
  const [appleOffres, setAppleOffres] = useState([]);
  const [avisInfos, setAvisInfos] = useState([]); // État pour les avis et informations
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const domaines = ["Technologie", "Santé", "Finance", "Éducation"];
  const typesOrganisation = ["Entreprise", "ONG", "Gouvernement", "Startup"];

  const handleChange = (e) => {
    const { name, type, files, value } = e.target;

    if (type === "file") {
      setProfile({
        ...profile,
        [name]: files[0],
      });
    } else {
      setProfile({
        ...profile,
        [name]: value,
      });
    }
  };

  const handleSubmit = async (e, section) => {
    e.preventDefault();
    setMessages({ ...messages, [section]: null });

    const formData = new FormData();
    Object.entries(profile).forEach(([key, value]) => {
      formData.append(key, value);
    });

    try {
      const response = await fetch(
        `http://127.0.0.1:8000/api/client/${profile.id}/update/`,
        {
          method: "PUT",
          body: formData,
        }
      );
      const data = await response.json();

      if (response.ok) {
        setMessages({ ...messages, [section]: "Mise à jour réussie!" });
      } else {
        setMessages({ ...messages, [section]: data.error || "Erreur lors de la mise à jour." });
      }
    } catch (error) {
      setMessages({ ...messages, [section]: "Erreur de connexion au serveur." });
    }
  };

  const handleSectionChange = (section) => {
    setActiveSection(section);
    if (section !== "info" && section !== "contact" && section !== "compte") {
      setShowProfileButtons(false);
    }
  };

  useEffect(() => {
    // Récupérer les offres d'emploi pour ce client
    const fetchOffresEmploi = async () => {
      try {
        const response = await fetch(`http://127.0.0.1:8000/api/client/${profile.id}/offres-emploi/`);
        const data = await response.json();
        if (response.ok) {
          setOffresEmploi(data);
        } else {
          console.error("Erreur lors de la récupération des offres d'emploi");
        }
      } catch (error) {
        console.error("Erreur de connexion au serveur", error);
      }
    };

    if (profile.id) {
      fetchOffresEmploi();
    }
  }, [profile.id]);

  useEffect(() => {
    // Récupérer les offres Apple
    const fetchAppleOffres = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await fetch(`http://127.0.0.1:8000/appels_offres/api/client/${profile.id}/`);
        const data = await response.json();
        if (response.ok) {
          setAppleOffres(data);
        } else {
          setError("Erreur lors de la récupération des offres Apple");
        }
      } catch (error) {
        setError("Erreur de connexion au serveur");
      } finally {
        setLoading(false);
      }
    };

    fetchAppleOffres();
  }, [profile.id]);

  useEffect(() => {
    // Récupérer les avis et informations
    const fetchAvisInfos = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await fetch(`http://127.0.0.1:8000/avis_infos/api/client/${profile.id}/`);
        const data = await response.json();
        if (response.ok) {
          setAvisInfos(data);
        } else {
          setError("Erreur lors de la récupération des avis et informations");
        }
      } catch (error) {
        setError("Erreur de connexion au serveur");
      } finally {
        setLoading(false);
      }
    };

    fetchAvisInfos();
  }, [profile.id]);

  return (
    <div className="dashboard">
      {/* <header className="header">
        <div className="header-content">
          <h1>Tableau de bord du client</h1>
          <div className="logo">
            <img src="/path/to/logo.png" alt="Logo" />
          </div>
        </div>
      </header> */}

<header className="header">
        <div className="header-content">
          <h1>Tableau de bord du client</h1>
          <div className="logo">
            {profile.logo ? (
              <img 
                src={typeof profile.client__logo === 'string' 
                  ? profile.logo 
                  : URL.createObjectURL(profile.logo)} 
                alt={`${profile.client__nom|| 'Client'} Logo`}
                className="client-logo"
              />
            ) : (
              <img 
                src="/path/to/default-logo.png" 
                alt=""
                className="client-logo"
              />
            )}
          </div>
        </div>
      </header>

      <aside className="sidebar">
        <nav>
          <ul>
            <li>
              <button
                className={`sidebar-button ${activeSection === "profile" ? "active" : ""}`}
                onClick={() => {
                  setActiveSection("info");
                  setShowProfileButtons(true);
                }}
              >
                Profile Client
              </button>
            </li>
            <li>
              <button
                className={`sidebar-button ${activeSection === "statistiques" ? "active" : ""}`}
                onClick={() => handleSectionChange("statistiques")}
              >
                Tableau de bord client
              </button>
            </li>
            <li>
              <button
                className={`sidebar-button ${activeSection === "offres" ? "active" : ""}`}
                onClick={() => handleSectionChange("offres")}
              >
                Offres d'emploi client
              </button>
            </li>
            <li>
              <button
                className={`sidebar-button ${activeSection === "apple-offres" ? "active" : ""}`}
                onClick={() => handleSectionChange("apple-offres")}
              >
                Apple offre client
              </button>
            </li>
            <li>
              <button
                className={`sidebar-button ${activeSection === "avis_infos" ? "active" : ""}`}
                onClick={() => handleSectionChange("avis_infos")}
              >
                Avis & infos
              </button>
            </li>
          </ul>
        </nav>
      </aside>

      <main className="main-content">
        {showProfileButtons && (
          <div className="profile-buttons">
            <button
              className={`tab-button ${activeSection === "info" ? "active" : ""}`}
              onClick={() => handleSectionChange("info")}
            >
              Informations Générales
            </button>
            <button
              className={`tab-button ${activeSection === "contact" ? "active" : ""}`}
              onClick={() => handleSectionChange("contact")}
            >
              Contact & Responsable
            </button>
            <button
              className={`tab-button ${activeSection === "compte" ? "active" : ""}`}
              onClick={() => handleSectionChange("compte")}
            >
              Gestion de Compte
            </button>
          </div>
        )}

        {activeSection === "statistiques" && <Statistics statistics={statistics} />}
        {activeSection === "info" && (
          <ProfileClient
            profile={profile}
            handleChange={handleChange}
            handleSubmit={handleSubmit}
            messages={messages}
            domaines={domaines}
            typesOrganisation={typesOrganisation}
            activeSection="info"
          />
        )}

        {activeSection === "contact" && (
          <ProfileClient
            profile={profile}
            handleChange={handleChange}
            handleSubmit={handleSubmit}
            messages={messages}
            domaines={domaines}
            typesOrganisation={typesOrganisation}
            activeSection="contact"
          />
        )}

        {activeSection === "compte" && (
          <ProfileClient
            profile={profile}
            handleChange={handleChange}
            handleSubmit={handleSubmit}
            messages={messages}
            domaines={domaines}
            typesOrganisation={typesOrganisation}
            activeSection="compte"
          />
        )}
        {/* {activeSection === "offres" && <OffresEmploi offresEmploi={offresEmploi} />} */}

        {activeSection === "offres" && <OffresEmploi offresEmploi={offresEmploi} clientId={profile.id} />}

        {activeSection === "apple-offres" && (
          <>
            {loading && <p>Chargement des offres Apple...</p>}
            {error && <p>{error}</p>}
            <AppleOffres appleOffres={appleOffres}  clientId={profile.id}/>
          </>
        )}
        {activeSection === "avis_infos" && (
          <>
            {loading && <p>Chargement des avis et informations...</p>}
            {error && <p>{error}</p>}
            <AvisInfos avisInfos={avisInfos}   clientId={profile.id} />
          </>
        )}
      </main>
    </div>
  );
};

export default ClientDashboard;









----------------------
import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import './ClientDashboard.css';
import ProfileClient from "./ProfileClient";
import OffresEmploi from "./OffresEmploi";
import AppleOffres from "./AppleOffres";
import Statistics from "./Statistics";
import AvisInfos from "./AvisInfos";
import { Navbar, Nav, Dropdown } from 'react-bootstrap';
import { FaHome, FaTachometerAlt, FaUserCircle, FaBriefcase, FaChevronLeft, FaChevronRight } from 'react-icons/fa';

const ClientDashboard = () => {
  const sideBarWidthExpanded = '14rem';
  const sideBarWidthCollapsed = '6.5rem';

  const [isSmallScreen, setSmallScreen] = useState(window.matchMedia('(max-width: 768px)').matches);
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSideBar = () => {
    if (!isSmallScreen) {
      setIsCollapsed(!isCollapsed);
    }
  };

  useEffect(() => {
    const mediaQuery = window.matchMedia('(max-width: 768px)');
    const handleMediaChange = (event) => {
      setSmallScreen(event.matches);
      if (event.matches) {
        setIsCollapsed(false);
      }
    };
    mediaQuery.addEventListener('change', handleMediaChange);
    return () => {
      mediaQuery.removeEventListener('change', handleMediaChange);
    };
  }, []);

  const location = useLocation();
  const initialProfile = location.state?.profileData || {};
  const [profile, setProfile] = useState(initialProfile);
  const [messages, setMessages] = useState({});
  const [activeSection, setActiveSection] = useState("statistiques");
  const [showProfileButtons, setShowProfileButtons] = useState(false);

  const [statistics, setStatistics] = useState({
    nombreOffresEmploi: 12,
    nombreAppleOffres: 5,
  });

  const [offresEmploi, setOffresEmploi] = useState([]);
  const [appleOffres, setAppleOffres] = useState([]);
  const [avisInfos, setAvisInfos] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const domaines = ["Technologie", "Santé", "Finance", "Éducation"];
  const typesOrganisation = ["Entreprise", "ONG", "Gouvernement", "Startup"];

  const handleChange = (e) => {
    const { name, type, files, value } = e.target;
    if (type === "file") {
      setProfile({
        ...profile,
        [name]: files[0],
      });
    } else {
      setProfile({
        ...profile,
        [name]: value,
      });
    }
  };

  const handleSubmit = async (e, section) => {
    e.preventDefault();
    setMessages({ ...messages, [section]: null });
    const formData = new FormData();
    Object.entries(profile).forEach(([key, value]) => {
      formData.append(key, value);
    });
    try {
      const response = await fetch(
        `http://127.0.0.1:8000/api/client/${profile.id}/update/`,
        {
          method: "PUT",
          body: formData,
        }
      );
      const data = await response.json();
      if (response.ok) {
        setMessages({ ...messages, [section]: "Mise à jour réussie!" });
      } else {
        setMessages({ ...messages, [section]: data.error || "Erreur lors de la mise à jour." });
      }
    } catch (error) {
      setMessages({ ...messages, [section]: "Erreur de connexion au serveur." });
    }
  };

  const handleSectionChange = (section) => {
    setActiveSection(section);
    if (section !== "info" && section !== "contact" && section !== "compte") {
      setShowProfileButtons(false);
    }
  };

  useEffect(() => {
    const fetchOffresEmploi = async () => {
      try {
        const response = await fetch(`http://127.0.0.1:8000/api/client/${profile.id}/offres-emploi/`);
        const data = await response.json();
        if (response.ok) {
          setOffresEmploi(data);
        } else {
          console.error("Erreur lors de la récupération des offres d'emploi");
        }
      } catch (error) {
        console.error("Erreur de connexion au serveur", error);
      }
    };
    if (profile.id) {
      fetchOffresEmploi();
    }
  }, [profile.id]);

  useEffect(() => {
    const fetchAppleOffres = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await fetch(`http://127.0.0.1:8000/appels_offres/api/client/${profile.id}/`);
        const data = await response.json();
        if (response.ok) {
          setAppleOffres(data);
        } else {
          setError("Erreur lors de la récupération des offres Apple");
        }
      } catch (error) {
        setError("Erreur de connexion au serveur");
      } finally {
        setLoading(false);
      }
    };
    fetchAppleOffres();
  }, [profile.id]);

  useEffect(() => {
    const fetchAvisInfos = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await fetch(`http://127.0.0.1:8000/avis_infos/api/client/${profile.id}/`);
        const data = await response.json();
        if (response.ok) {
          setAvisInfos(data);
        } else {
          setError("Erreur lors de la récupération des avis et informations");
        }
      } catch (error) {
        setError("Erreur de connexion au serveur");
      } finally {
        setLoading(false);
      }
    };
    fetchAvisInfos();
  }, [profile.id]);

  const profileData = location.state?.profileData;

  return (
    <div className="dashboard">
      <header
        style={{
          left: isSmallScreen ? '0' : isCollapsed ? sideBarWidthCollapsed : sideBarWidthExpanded,
          width: isSmallScreen ? '100%' : `calc(100% - ${isCollapsed ? sideBarWidthCollapsed : sideBarWidthExpanded})`,
          transition: 'left 0.3s ease, width 0.3s ease'
        }}
        className="header"
      >
        <div className="header-content">
          <a 
            className="sideBar-brand d-flex align-items-center justify-content-center" 
            href=""
          >
            <div className="sideBar-brand-icon">
              
            </div>
            <div className="sideBar-brand-text mx-3"></div>
          </a>
          
          <div className="logo">
            <span className="client-name" style={{ marginRight: "5px", fontSize: '10px' }}>
              {profileData && profileData.libelle_fr}
            </span>
            <i className="fa fa-user-circle"></i>
          </div>
        </div>
      </header>

      <ul 
        className={`navbar-nav bg-info sideBar sideBar-dark accordion ${isCollapsed ? 'collapsed' : ''}`}
        id="mainMenu"
      >

          <a 
            className="sideBar-brand d-flex align-items-center justify-content-center" 
            href="https://beta.mr"
          >
            <div className="sideBar-brand-icon">
              <FaHome className="fa-lg" />
            </div>
            <div className="sideBar-brand-text mx-3" style={{textDecoration:'none'}}>BETA</div>
          </a>
        <li className="divider">
          <hr className="sideBar-divider my-0" />
        </li>
        <li className="nav-item active">
          <a className="nav-link" href="https://beta.mr/dashboard">
            <FaTachometerAlt />
            <span style={{textDecoration:'none'}}>Tableau de bord</span>
          </a>
        </li>
        <li className="divider">
          <hr className="sideBar-divider m-0" />
        </li>
        <li className="nav-item">
          <a className="nav-link text-white" href="https://beta.mr/beta/employeurs/get_fiche">
            <FaUserCircle />
            <span>Mon profil</span>
          </a>
        </li>
        <li className="divider">
          <hr className="sideBar-divider m-0" />
        </li>
        <li className="nav-item">
          <a className="nav-link text-white" href="https://beta.mr/offres">
            <FaBriefcase />
            <span>Offres d'emploi</span>
          </a>
        </li>
        <li className="nav-item">
          <a className="nav-link" href="https://beta.mr/appels">
            <FaBriefcase />
            <span>Appels d'Offres</span>
          </a>
        </li>
        <li className="nav-item">
          <a className="nav-link" href="https://beta.mr/avis">
            <FaBriefcase />
            <span>Avis & infos</span>
          </a>
        </li>
        <li className="divider d-none d-md-block">
          <hr className="sideBar-divider d-none d-md-block" />
        </li>
        <li className="toggle-button-item w-100">
  <div className="text-center d-none d-md-block">
    <button 
      className="rounded-circle border-0 mx-auto" 
      id="sideBarToggle"
      onClick={toggleSideBar}
      aria-label="Toggle side bar" 
    >
      {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
    </button>
  </div>
</li>
      </ul> 

      <main
        style={{
          marginLeft: isSmallScreen ? '0' : isCollapsed ? sideBarWidthCollapsed : sideBarWidthExpanded,
          transition: 'margin-left 0.3s ease',
          marginTop: '80px'
        }}
        className="main-content"
      >
        {showProfileButtons && (
          <div className="profile-buttons">
            <button
              className={`tab-button ${activeSection === "info" ? "active" : ""}`}
              onClick={() => handleSectionChange("info")}
            >
              Informations Générales
            </button>
            <button
              className={`tab-button ${activeSection === "contact" ? "active" : ""}`}
              onClick={() => handleSectionChange("contact")}
            >
              Contact & Responsable
            </button>
            <button
              className={`tab-button ${activeSection === "compte" ? "active" : ""}`}
              onClick={() => handleSectionChange("compte")}
            >
              Gestion de Compte
            </button>
          </div>
        )}

        {activeSection === "statistiques" && <Statistics statistics={statistics} />}
        {activeSection === "info" && (
          <ProfileClient
            profile={profile}
            handleChange={handleChange}
            handleSubmit={handleSubmit}
            messages={messages}
            domaines={domaines}
            typesOrganisation={typesOrganisation}
            activeSection="info"
          />
        )}

        {activeSection === "contact" && (
          <ProfileClient
            profile={profile}
            handleChange={handleChange}
            handleSubmit={handleSubmit}
            messages={messages}
            domaines={domaines}
            typesOrganisation={typesOrganisation}
            activeSection="contact"
          />
        )}

        {activeSection === "compte" && (
          <ProfileClient
            profile={profile}
            handleChange={handleChange}
            handleSubmit={handleSubmit}
            messages={messages}
            domaines={domaines}
            typesOrganisation={typesOrganisation}
            activeSection="compte"
          />
        )}
        {activeSection === "offres" && <OffresEmploi offresEmploi={offresEmploi} clientId={profile.id} />}

        {activeSection === "apple-offres" && (
          <>
            {loading && <p>Chargement des offres Apple...</p>}
            {error && <p>{error}</p>}
            <AppleOffres appleOffres={appleOffres} clientId={profile.id}/>
          </>
        )}
        {activeSection === "avis_infos" && (
          <>
            {loading && <p>Chargement des avis et informations...</p>}
            {error && <p>{error}</p>}
            <AvisInfos avisInfos={avisInfos} clientId={profile.id} />
          </>
        )}
      </main>
    </div>
  );
};

export default ClientDashboard;



/* Reset CSS */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Header */
.header {
  background-color: #fff;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: fixed;
  top: 0;
  right: 0;
  z-index: 1000;
  display: flex;
  align-items: center;
  transition: left 0.3s ease, width 0.3s ease;
height: 70px;
}

.header-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-right: 20px;
  width: 100%;
}

.logo {
  display: flex;
  align-items: center;
}

.client-name {
  margin-right: 5px;
  font-size: 10px;
}

.fa-user-circle {
  margin-left: 5px;
}

/* Side Bar */
.sideBar {
  position: fixed;
  top: 0;
  left: 0;
  min-height: 100vh;
  background-color: #36b9cc;
  transition: width 0.3s ease;
  width: 14rem;
}

.sideBar.collapsed {
  width: 6.5rem !important;
}

.nav-brand-item {
  list-style: none;
}

.divider {
  list-style: none;
}

.toggle-button-item {
  list-style: none;

}

.sideBar-brand {
  padding: 1.5rem;
  /* text-decoration: none; */
  white-space: nowrap;
}

.sideBar-brand-icon {
  font-size: 1.5rem;
}

.sideBar-brand-text {
  font-size: 1.2rem;
  font-weight: 700;
  transition: opacity 0.3s ease;
}

.nav-link {
  display: flex;
  align-items: center;
  padding: 1rem;
  color: rgba(255,255,255,.8);
  text-decoration: none;
  transition: all 0.3s;
  white-space: nowrap;
}

.nav-link:hover {
  color: #fff;
  background-color: rgba(255,255,255,.1);
}

.nav-link.active {
  color: #fff;
  background-color: rgba(255,255,255,.15);
}

.nav-link svg {
  margin-right: 0.75rem;
  min-width: 1.5rem;
  text-align: center;
}

.sideBar-divider {
  border-top: 1px solid rgba(255,255,255,.15);
  margin: 0 1rem;
}

#sideBarToggle {
  width: 2.5rem;
  height: 2.5rem;
  background-color: rgba(255,255,255,.2);
  color: white;
  margin: 1rem 0;
  transition: all 0.3s ease;
}

#sideBarToggle:hover {
  background-color: rgba(255,255,255,.3) !important;
  transform: rotate(180deg);
}

#sideBarToggle svg {
  margin: 0;
  vertical-align: middle;
}

/* Media Queries */
@media (min-width: 768px) {
  .sideBar {
      width: 14rem !important;
  }
  .sideBar.collapsed {
      width: 6.5rem !important;
  }
  .sideBar.collapsed .sideBar-brand-text,
  .sideBar.collapsed .nav-link span {
      display: none;
  }
}

@media (max-width: 768px) {
  .sideBar {
      position: static;
      width: 100%;
      margin-top: 80px;
  }

  .main-content {
      margin-left: 0;
  }
}

/* Autres styles existants */
.form-section {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.form-section h2 {
  font-size: 20px;
  margin-bottom: 20px;
  color: #333;
}

.input-field {
  margin-bottom: 15px;
}

.input-field label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #555;
}

.input-field input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.submit-button {
  background-color: #4E73DF;
  color: #fff;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.submit-button:hover {
  background-color: #4E73DF;
}

.error {
  color: #e74c3c;
  margin-bottom: 15px;
}

.success {
  color: #4E73DF;
  margin-bottom: 15px;
}

.client-tabs {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.tab-button {
  background: none;
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  border-radius: 4px;
  color: #333;
  transition: background-color 0.3s ease;
}

.tab-button:hover {
  background-color: #4E73DF;
  color: #fff;
}

.tab-button.active {
  background-color: #4E73DF;
  color: #fff;
  font-weight: bold;
}

.flex {
  display: flex;
}

.items-center {
  align-items: center;
}

.font-extrabold {
  font-weight: 200;
}

.text-4xl {
  font-size: 1.50rem;
  color: #3b82f6;
  margin-left: 10px;
}

.w-full {
  width: 100%;
}